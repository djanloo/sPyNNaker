# Function to pip install a branch/tag or master if doesn't exist
pipinstall() {
    echo "pip install $@"
    pip install $@ > /tmp/last_pip.tmp 2>&1
    LAST_ERROR=$?
    if [ $LAST_ERROR -ne 0 ]; then
        cat /tmp/last_pip.tmp
        exit $LAST_ERROR
    fi
}

# Function to git clone a branch/tag or master if doesn't exist
gitclone() {
    FOLDER=$1
    REPO=$2
    BRANCH=$3
    PREFIX=$4
    version=$(python support/find_closest_git_version.py $REPO $BRANCH $PREFIX)
    echo "Getting version $version of $REPO"
    (cd $FOLDER; git checkout master; git pull; git checkout $version) &> /tmp/last_git.tmp
    LAST_ERROR=$?
    if [ $LAST_ERROR -ne 0 ]; then
        cat /tmp/last_git.tmp
        exit $LAST_ERROR
    fi
}

domake() {
    DIR=$1
    GOAL=$2
    echo "Building $GOAL in $DIR"
    make -C $DIR $GOAL &> /tmp/last_make.tmp 2>&1
    LAST_ERROR=$?
    if [ $LAST_ERROR -ne 0 ]; then
        cat /tmp/last_make.tmp
        exit $LAST_ERROR
    fi
}

dosetup() {
    DIR=$1
    if [ -f "$DIR/setup.py" ]; then
        echo "Setting up $DIR"
        (cd $DIR; python setup.py develop > /tmp/last_setup.tmp 2>&1 )
        LAST_ERROR=$?
        if [ $LAST_ERROR -ne 0 ]; then
            cat /tmp/last_setup.tmp
            exit $LAST_ERROR
        fi
    else
        echo "Skipping setting up $DIR as no setup.py found"
    fi
}

dosetupinstall() {
    DIR=$1
    if [ -f "$DIR/setup.py" ]; then
        echo "Setting up $DIR"
        (cd $DIR; python setup.py install > /tmp/last_setup.tmp 2>&1 )
        LAST_ERROR=$?
        if [ $LAST_ERROR -ne 0 ]; then
            cat /tmp/last_setup.tmp
            exit $LAST_ERROR
        fi
    else
        echo "Skipping setting up $DIR as no setup.py found"
    fi
}

setuppynn() {
    echo "Setting up sPyNNaker PyNN Link"
    python -m spynnaker8.setup_pynn &> /tmp/setup_pynn_new.tmp 2>&1
    LAST_ERROR=$?
    if [ $LAST_ERROR -ne 0 ]; then
        python -m spynnaker8.setup-pynn &> /tmp/setup_pynn_old.tmp 2>&1
        LAST_ERROR=$?
        if [ $LAST_ERROR -ne 0 ]; then
            echo "Old Error"
            cat /tmp/setup_pynn_new.tmp
            echo "New Error"
            cat /tmp/setup_pynn_old.tmp
            exit $LAST_ERROR
        fi
    fi
}

domvn() {
    DIR=$1
    echo "Building $DIR"
    mvn -f $DIR package -Dmaven.test.skip=true &> /tmp/last_mvn.tmp 2>&1
    LAST_ERROR=$?
    if [ $LAST_ERROR -ne 0 ]; then
        cat /tmp/last_mvn.tmp
        exit $LAST_ERROR
    fi
}

switchversion() {
    VERSION=$1
    # Get SpiNNFrontEndCommon to determine spalloc version
    gitclone SpiNNFrontEndCommon https://github.com/SpiNNakerManchester/SpiNNFrontEndCommon.git $VERSION

    # Get spalloc version from FEC if possible
    spalloc_version_string=$(grep spalloc SpiNNFrontEndCommon/requirements.txt | sed "s/spalloc >= \([0-9\.]*\), < \([0-9\.]*\)/\1/")
    if [ -z "$spalloc_version" ]; then
        if [ "$VERSION" == "master" ]; then
            spalloc_version=$VERSION
        elif [ -z "spalloc_version_string" ]; then
            spalloc_version=$VERSION
        else
            spalloc_version=$spalloc_version_string
        fi
    fi

    # Get SpiNNMan to determine SCAMP version
    gitclone SpiNNMan https://github.com/SpiNNakerManchester/SpiNNMan.git $VERSION

    # Get SCAMP version from SpiNNMan if possible
    version_string=$(strings SpiNNMan/spinnman/messages/spinnaker_boot/boot_data/scamp.boot | grep -A 1 "SC&MP/SpiNNaker")
    if [ -z "$spinnaker_tools_version" ]; then
        if [ -z "$version_string" ]; then
            spinnaker_tools_version=3.2.5
        else
            spinnaker_tools_version=$(echo $version_string | sed "s/SC&MP\/SpiNNaker /v/")
        fi
    fi

    # Get SpiNNaker Tools
    gitclone spinnaker_tools https://github.com/SpiNNakerManchester/spinnaker_tools.git $spinnaker_tools_version v

    # Get the rest of the tools
    gitclone SpiNNUtils https://github.com/SpiNNakerManchester/SpiNNUtils.git $VERSION
    gitclone SpiNNMachine https://github.com/SpiNNakerManchester/SpiNNMachine.git $VERSION
    gitclone SpiNNStorageHandlers https://github.com/SpiNNakerManchester/SpiNNStorageHandlers.git $VERSION
    gitclone PACMAN https://github.com/SpiNNakerManchester/PACMAN.git $VERSION
    gitclone DataSpecification https://github.com/SpiNNakerManchester/DataSpecification.git $VERSION
    gitclone spalloc https://github.com/SpiNNakerManchester/spalloc.git $spalloc_version
    gitclone spinn_common https://github.com/SpiNNakerManchester/spinn_common.git $VERSION
    gitclone sPyNNaker https://github.com/SpiNNakerManchester/sPyNNaker.git $VERSION
    gitclone sPyNNaker8 https://github.com/SpiNNakerManchester/sPyNNaker8.git $VERSION
    gitclone SpiNNakerGraphFrontEnd https://github.com/SpiNNakerManchester/SpiNNakerGraphFrontEnd.git $VERSION
    gitclone JavaSpiNNaker https://github.com/SpiNNakerManchester/JavaSpiNNaker.git $VERSION

    # Build the C Code
    export SPINN_DIRS=${PWD}/spinnaker_tools
    export NEURAL_MODELLING_DIRS=${PWD}/sPyNNaker/neural_modelling
    domake $SPINN_DIRS clean
    domake $SPINN_DIRS
    domake spinn_common clean
    domake spinn_common install
    if [ -e SpiNNMan/c_models ]; then
        domake SpiNNMan/c_models clean
        domake SpiNNMan/c_models
    fi
    domake SpiNNFrontEndCommon/c_common/front_end_common_lib install-clean
    domake SpiNNFrontEndCommon/c_common/ clean
    domake SpiNNFrontEndCommon/c_common/
    domake SpiNNFrontEndCommon/c_common/ install
    domake sPyNNaker/neural_modelling/ clean
    domake sPyNNaker/neural_modelling/

    # Build Java Code
    domvn JavaSpiNNaker

    # Setup packages to make sure the right libraries are installed
    dosetup SpiNNUtils
    dosetup SpiNNMachine
    dosetup SpiNNStorageHandlers
    dosetup DataSpecification
    dosetup PACMAN
    dosetup SpiNNMan
    dosetup spalloc
    dosetup SpiNNFrontEndCommon
    dosetup sPyNNaker
    dosetup sPyNNaker8
    dosetup SpiNNakerGraphFrontEnd
}

if [ ! -z $pyver ]; then
    echo "Using Python $pyver"
fi

if [ -f "./spynnaker.cfg" ]; then
    cat ./spynnaker.cfg
fi

initdir=${PWD}
echo "Running from $initdir; changing to spinnaker"
cd /home/spinnaker/spinnaker

# Work out spynnaker version
defver=6.0.0
spynnakerver=${spynnaker_version:-$defver}
if [ "$spynnakerver" != "$defver" ]; then
    switchversion $spynnakerver
fi

echo "Going back to $initdir"
cd $initdir
ls -l

# Pip install any additional dependencies
pip_installs=$(echo $extra_pip_installs | jq -r ".[]")
for pip_install in $pip_installs; do
    pipinstall $pip_install
done

# Clone any additional git repositories
git_repos=$(echo $extra_git_repositories | jq -r ".[]")
for git_repo in $git_repos; do
    git clone $git_repo
done

# Make any additional C code
makes=$(echo $extra_makes | jq -r ".[]")
for to_make in $makes; do
    domake $to_make
done

# Run any additional python setups
python_setups=$(echo $extra_python_setups | jq -r ".[]")
for python_setup in $python_setups; do
    dosetupinstall $python_setup
done

